<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python虚拟环境(创建激活操作删除-virtualenv、Pycharm、virtualenvwrapper、pipenv)</title>
    <url>/2020/04/16/Python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83(%E5%88%9B%E5%BB%BA%E6%BF%80%E6%B4%BB%E6%93%8D%E4%BD%9C%E5%88%A0%E9%99%A4-virtualenv%E3%80%81Pycharm%E3%80%81virtualenvwrapper%E3%80%81pipenv)/</url>
    <content><![CDATA[<h1 id="Python基础42-虚拟环境-创建-激活-操作-删除-virtualenv、Pycharm、virtualenvwrapper、pipenv"><a href="#Python基础42-虚拟环境-创建-激活-操作-删除-virtualenv、Pycharm、virtualenvwrapper、pipenv" class="headerlink" title="Python基础42-虚拟环境(创建/激活/操作/删除-virtualenv、Pycharm、virtualenvwrapper、pipenv)"></a>Python基础42-虚拟环境(创建/激活/操作/删除-virtualenv、Pycharm、virtualenvwrapper、pipenv)</h1><h1 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a>1 概念</h1><ul>
<li>一个独立的局部的 Python 环境</li>
<li>完全模拟系统全局 Python 环境的使用，如安装、卸载包到逻辑操作等</li>
</ul>
<h1 id="2-作用"><a href="#2-作用" class="headerlink" title="2 作用"></a>2 作用</h1><ul>
<li>让项目运行在一个独立的局部的 Python 环境中，使采用不同环境的项目互不干扰。</li>
</ul>
<h1 id="3-安装虚拟环境"><a href="#3-安装虚拟环境" class="headerlink" title="3 安装虚拟环境"></a>3 安装虚拟环境</h1><ul>
<li>virtualenv，就是一个三方包</li>
<li>安装命令，pip install virtualenv</li>
<li>使用文档，<a href="https://virtualenv.pypa.io/en/stable/userguide/" target="_blank" rel="noopener">https://virtualenv.pypa.io/en/stable/userguide/</a></li>
</ul>
<p>安装过程中，如果出现如下 error 信息是，可以尝试切换源重新下载<br> 阿里源，不行</p>
<pre><code class="kotlin">$ pip install virtualenv                                                     
Looking in indexes: http://pypi.douban.com/pypi/simple
Collecting virtualenv
  The repository located at pypi.douban.com is not a trusted or secure host and is being ignored. If this repository is available via HTTPS we recommend you use HTTPS instead, otherwise you may silence this warning and allow it anyway with &#39;--trusted-host pypi.douban.com&#39;.
  Could not find a version that satisfies the requirement virtualenv (from versions: )
No matching distribution found for virtualenv</code></pre>
<p>豆瓣源，不行</p>
<pre><code class="csharp">$ pip install virtualenv --trusted-host pypi.douban.com                      
Looking in indexes: http://pypi.douban.com/pypi/simple
Collecting virtualenv
  Could not find a version that satisfies the requirement virtualenv (from versions: )
No matching distribution found for virtualenv</code></pre>
<p>官方源，不行</p>
<pre><code class="csharp">$ pip install virtualenv -i https://pypi.python.org/simple/                  
Looking in indexes: https://pypi.python.org/simple/
Collecting virtualenv
  Downloading https://files.pythonhosted.org/packages/b6/30/96a02b2287098b23b875bc8c2f58071c35d2efe84f747b64d523721dc2b5/virtualenv-16.0.0-py2.py3-none-any.whl (1.9MB)
    4% |█▌                              | 92kB 2.7kB/s eta 0:11:08Exception:
Traceback (most recent call last):
 ....
pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host=&#39;files.pythonhosted.org&#39;, port=443): Read timed out.</code></pre>
<p>清华源，可以</p>
<pre><code class="cpp">$ pip install virtualenv -i https://pypi.tuna.tsinghua.edu.cn/simple/      
Looking in indexes: https://pypi.tuna.tsinghua.edu.cn/simple/
Collecting virtualenv
  Downloading https://pypi.tuna.tsinghua.edu.cn/packages/ed/ea/e20b5cbebf45d3096e8138ab74eda139595d827677f38e9dd543e6015bdf/virtualenv-15.2.0-py2.py3-none-any.whl (2.6MB)
    100% |████████████████████████████████| 2.6MB 4.1MB/s
Installing collected packages: virtualenv
Successfully installed virtualenv-15.2.0</code></pre>
<h1 id="4-使用虚拟环境"><a href="#4-使用虚拟环境" class="headerlink" title="4 使用虚拟环境"></a>4 使用虚拟环境</h1><h2 id="4-1-创建一个局部的隔离的虚拟环境"><a href="#4-1-创建一个局部的隔离的虚拟环境" class="headerlink" title="4.1 创建一个局部的隔离的虚拟环境"></a>4.1 创建一个局部的隔离的虚拟环境</h2><h3 id="4-1-1-创建命令：virtualenv-虚拟环境名称"><a href="#4-1-1-创建命令：virtualenv-虚拟环境名称" class="headerlink" title="4.1.1 创建命令：virtualenv 虚拟环境名称"></a>4.1.1 创建命令：virtualenv 虚拟环境名称</h3><pre><code class="undefined">virtualenv ENV</code></pre>
<ul>
<li>cd 到存放虚拟环境的的地址</li>
<li>执行命令virtualenv ENV，创建名为ENV 的虚拟环境</li>
</ul>
<pre><code class="bash">% cd /Users/xxx/Desktop/testvirtuals                    

% virtualenv virtual1                   
Using base prefix &#39;/usr/local/Cellar/python3/3.6.4_1/Frameworks/Python.framework/Versions/3.6&#39;
New python executable in /Users/xxx/Desktop/testvirtuals/virtual1/bin/python3.6
Also creating executable in /Users/xxx/Desktop/testvirtuals/virtual1/bin/python
Installing setuptools, pip, wheel...done.</code></pre>
<p>创建虚拟环境结果</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-6999784eb34dd793.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/818/format/webp" srcset="/img/loading.gif" alt="img"></p>
<p>注意：</p>
<ul>
<li><code>Using base prefix</code> 使用的是3.6版本环境，原因是 virtualenv 安装位置就在3.6下，所以默认使用的是其安装位置版本的 Python 环境</li>
<li>虚拟环境文件包括：Python解析器，包管理工具(setuptools, pip, wheel)，三方包等</li>
<li>即使创建的 bin 脚本命令集含有 python 和 python3两个脚本，实际它们的版本都是3.6，这个防止使用者理解不足导致已为使用 python 命令时是使用 Python2.x 版本。</li>
</ul>
<pre><code class="jsx">% /Users/xxx/Desktop/testvirtuals/virtual1/bin/python3 --version
Python 3.6.4

% /Users/xxx/Desktop/testvirtuals/virtual1/bin/python --version
Python 3.6.4</code></pre>
<h3 id="4-1-2-指定-Python-版本创建虚拟环境"><a href="#4-1-2-指定-Python-版本创建虚拟环境" class="headerlink" title="4.1.2 指定 Python 版本创建虚拟环境"></a>4.1.2 指定 Python 版本创建虚拟环境</h3><p>可选参数：-p<br> 指定 Python2.x 版本创建虚拟环境</p>
<pre><code class="bash">virtualenv -p /usr/local/bin/python2.7 testvirtual2</code></pre>
<p>执行效果</p>
<pre><code class="bash">$ virtualenv -p /usr/local/bin/python2.7 ENV
Running virtualenv with interpreter /usr/local/bin/python2.7
New python executable in /Users/minyu_leung/Desktop/virtual2/ENV/bin/python2.7
Also creating executable in /Users/minyu_leung/Desktop/virtual2/ENV/bin/python
Installing setuptools, pip, wheel...done.</code></pre>
<h3 id="4-1-3-是否继承系统三方库-system-site-packages"><a href="#4-1-3-是否继承系统三方库-system-site-packages" class="headerlink" title="4.1.3 是否继承系统三方库 --system-site-packages"></a>4.1.3 是否继承系统三方库 <code>--system-site-packages</code></h3><p>添加参数<code>--system-site-packages</code>，项目检索库的时候，也会到系统的三方库中找<br> 不添加时，默认只到虚拟环境中查找库</p>
<pre><code class="undefined">virtualenv --system-site-packages ENV</code></pre>
<h2 id="4-2-激活-退出-虚拟环境"><a href="#4-2-激活-退出-虚拟环境" class="headerlink" title="4.2 激活/退出 虚拟环境"></a>4.2 激活/退出 虚拟环境</h2><p>在 Mac 下，激活所创建的虚拟环境步骤：</p>
<ol>
<li>cd 到虚拟环境文件夹目录</li>
</ol>
<pre><code class="bash">cd /Users/xxx/Desktop/testvirtuals/virtual1</code></pre>
<ol>
<li>执行命令 source bin/activate，shell 会打印出已激活的虚拟环境名称</li>
</ol>
<pre><code class="bash">$ source bin/activate
(virtual1)</code></pre>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-f0e1aeda8aa76b6e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/977/format/webp" srcset="/img/loading.gif" alt="img"></p>
<p>带 source 命令</p>
<ol>
<li><p>验证当前确实在已激活的虚拟环境中，执行命令 pip –version 和 pip list</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-6cbe76da12ffc2e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1118/format/webp" srcset="/img/loading.gif" alt="img"></p>
<p>每次打印后都会提示(virtual1)，所在环境是虚拟环境</p>
</li>
<li><p>退出虚拟环境，在激活的虚拟环境中，执行命令 deactivate</p>
</li>
</ol>
<pre><code class="ruby">$ deactivate</code></pre>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-96810edb63e6c71e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1018/format/webp" srcset="/img/loading.gif" alt="img"></p>
<p>注意，不用带 source 命令</p>
<ol>
<li><p>验证已经退出，执行命令 pip –version 和 pip list</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-acc089c067eaba88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1020/format/webp" srcset="/img/loading.gif" alt="img"></p>
<p>结果都是来自系统环境</p>
</li>
<li><p>注意：如果系统是 Windows 的话，则不需要带上 source 命令，直接 cd 进入Scripts脚本文件夹中，然后执行 activate 和 deactivate 脚本即可。与 Mac 不同的是，虚拟环境的 bin 目录下只有 activate 脚本，没有 deactivate 脚本。</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-d1b30e5a43c651cf.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/775/format/webp" srcset="/img/loading.gif" alt="img"></p>
<p>Windows 下的虚拟环境 Scripts 文件夹文件目录</p>
</li>
</ol>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-a37973ef28926b56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/633/format/webp" srcset="/img/loading.gif" alt="img"></p>
<p>Mac 虚拟环境 bin 目录文件</p>
<p><a href="https://virtualenv.pypa.io/en/stable/userguide/" target="_blank" rel="noopener">使用文档</a>中也有说 source 使用原因：</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-2bfe425e8159747b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/777/format/webp" srcset="/img/loading.gif" alt="img"></p>
<h2 id="4-3-在激活状态下，操作"><a href="#4-3-在激活状态下，操作" class="headerlink" title="4.3 在激活状态下，操作"></a>4.3 在激活状态下，操作</h2><ol>
<li>操作三方块<br> pip install requests</li>
<li>执行 py 文件<br> python xx.py</li>
</ol>
<p>以上操作均作用在虚拟环境中。</p>
<h2 id="4-4-删除虚拟环境"><a href="#4-4-删除虚拟环境" class="headerlink" title="4.4 删除虚拟环境"></a>4.4 删除虚拟环境</h2><ul>
<li>直接删除虚拟环境所在目录即</li>
</ul>
<h2 id="4-5-项目交接"><a href="#4-5-项目交接" class="headerlink" title="4.5 项目交接"></a>4.5 项目交接</h2><p>场景：确保共享的项目能够在其他电脑上正常运行<br> 解决：</p>
<ol>
<li>方案一：</li>
</ol>
<ul>
<li>连同虚拟环境和项目一起拷贝给他人</li>
</ul>
<ol>
<li>方案二：</li>
</ol>
<ul>
<li>在虚拟环境中，冻结依赖需求文本</li>
<li>把项目和依赖需求文本给他人</li>
<li>他人在本地创建一个新的虚拟环境，并根据依赖需求文本安装相关库</li>
</ul>
<p><strong>技能点</strong>：</p>
<ul>
<li>虚拟环境的创建</li>
<li>虚拟环境的激活</li>
<li>操作虚拟环境</li>
<li>冻结项目需求文本 pip freeze &gt; requirements.txt</li>
<li>根据需求文本，安装项目依赖库 pip install -r requirements.txt （在激活的虚拟环境中）</li>
</ul>
<h1 id="5-Pycharm-中使用虚拟环境"><a href="#5-Pycharm-中使用虚拟环境" class="headerlink" title="5 Pycharm 中使用虚拟环境"></a>5 Pycharm 中使用虚拟环境</h1><ol>
<li><p>创建项目</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-96770a324e09b1c8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/779/format/webp" srcset="/img/loading.gif" alt="img"></p>
</li>
<li><p>在创建项目时，使用虚拟环境</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-f386466e4e33fa57.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/862/format/webp" srcset="/img/loading.gif" alt="img"></p>
</li>
</ol>
<p>创建后，目录结构</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-4438a8e2c308b040.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/593/format/webp" srcset="/img/loading.gif" alt="img"></p>
<ol>
<li><p>在项目偏好设置里可以切换环境和安装需要的库</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-25d73f4640a84b5a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1001/format/webp" srcset="/img/loading.gif" alt="img"></p>
</li>
</ol>
<p>总结：<br> IDE 让虚拟环境的使用更加方便，图形化创建和切换，包的管理等。让程序员更关注项目的开发而非各种命令的记忆。</p>
<h1 id="6-虚拟环境进阶使用"><a href="#6-虚拟环境进阶使用" class="headerlink" title="6 虚拟环境进阶使用"></a>6 虚拟环境进阶使用</h1><h2 id="6-1-集中式虚拟环境管理"><a href="#6-1-集中式虚拟环境管理" class="headerlink" title="6.1 集中式虚拟环境管理"></a>6.1 集中式虚拟环境管理</h2><p><a href="https://pypi.org/project/virtualenvwrapper/" target="_blank" rel="noopener">virtualenvwrapper</a><br> <a href="https://virtualenvwrapper.readthedocs.io/en/latest/" target="_blank" rel="noopener">使用文档</a></p>
<ol>
<li>通过virtualenvwrapper创建的虚拟环境都会统一存放到指定位置统一管理</li>
<li>方便在多个虚拟环境间切换</li>
<li>更加方便的去使用 virtualenv</li>
</ol>
<ul>
<li>快速创建虚拟环境并激活</li>
</ul>
<pre><code class="undefined">mkvirtualenv venv1</code></pre>
<ul>
<li>快速在多个虚拟环境中切换</li>
</ul>
<pre><code class="undefined">workon venv2</code></pre>
<ul>
<li>快速关闭虚拟环境</li>
</ul>
<pre><code class="undefined">deactivate</code></pre>
<ul>
<li>快速删除虚拟环境</li>
</ul>
<pre><code class="undefined">rmvirtualenv env1</code></pre>
<ul>
<li>查看所有创建的虚拟环境</li>
</ul>
<pre><code class="undefined">lsvirtualenv</code></pre>
<p><strong>弊端</strong></p>
<ul>
<li>只是对 virtualenv 的使用封装，包的安装及虚拟环境的操作依然是分离的。</li>
<li>并未具备对项目包的依赖管理及需求文本的生成操作封装</li>
</ul>
<h2 id="6-2-更加基于项目的虚拟环境管理"><a href="#6-2-更加基于项目的虚拟环境管理" class="headerlink" title="6.2 更加基于项目的虚拟环境管理"></a>6.2 更加基于项目的虚拟环境管理</h2><h3 id="6-2-1-pipenv-使用优点"><a href="#6-2-1-pipenv-使用优点" class="headerlink" title="6.2.1 pipenv 使用优点"></a>6.2.1 pipenv 使用优点</h3><ol>
<li>推荐使用：<a href="https://pypi.org/project/pipenv/" target="_blank" rel="noopener">pipenv</a>，是  pip + virtualenv 结合体，解决了virtualenvwrapper弊端</li>
<li>会自动帮你创建虚拟环境，以及安装三方库</li>
<li>会自动的记录你的项目依赖的所有三方库</li>
<li>使用 pipfile 和 pipfile.lock取代了 requirements.txt</li>
</ol>
<p><a href="https://pypi.org/project/pipenv/" target="_blank" rel="noopener">使用文档</a><br> <a href="https://pypi.org/project/pipenv/" target="_blank" rel="noopener">使用文档2</a></p>
<p>pipenv 命令使用一览</p>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-2a8f6aae311ed8f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1113/format/webp" srcset="/img/loading.gif" alt="img"></p>
<blockquote>
<p>pipenv 命令都是参照项目中的 Pipfile 位置和内容操作的，类似 cocoapods 的 pod 命令参照podfile文件操作。</p>
</blockquote>
<h3 id="6-2-2-使用步骤"><a href="#6-2-2-使用步骤" class="headerlink" title="6.2.2 使用步骤"></a>6.2.2 使用步骤</h3><h3 id="6-2-2-1-创建虚拟环境"><a href="#6-2-2-1-创建虚拟环境" class="headerlink" title="6.2.2.1 创建虚拟环境"></a>6.2.2.1 创建虚拟环境</h3><pre><code class="bash">1. cd 到项目文件夹目录下
2. 在该目录下执行命令
pipenv --two # 指定参照Python版本
或
pipenv --three

3. 查看相关信息
查看位置：pipenv --where
查看虚拟环境位置：pipenv --venv
查看解析器信息：pipenv --py</code></pre>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-d7b94c520db1c332.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/885/format/webp" srcset="/img/loading.gif" alt="img"></p>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-91582750ee430c67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/469/format/webp" srcset="/img/loading.gif" alt="img"></p>
<h3 id="6-2-2-2-激活虚拟环境"><a href="#6-2-2-2-激活虚拟环境" class="headerlink" title="6.2.2.2 激活虚拟环境"></a>6.2.2.2 激活虚拟环境</h3><pre><code class="undefined">pipenv shell</code></pre>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-6a4c448fb9c3d051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1119/format/webp" srcset="/img/loading.gif" alt="img"></p>
<h3 id="6-2-2-3-在激活状态下操作"><a href="#6-2-2-3-在激活状态下操作" class="headerlink" title="6.2.2.3 在激活状态下操作"></a>6.2.2.3 在激活状态下操作</h3><ol>
<li>执行 py 文件，python xx.py ，其中 python 指的是虚拟环境 Python版本</li>
<li>安装包</li>
</ol>
<pre><code class="undefined">pipenv install requests</code></pre>
<blockquote>
<p>注意：不要使用 pip install 命令，使用的话虽然可以在虚拟环境中安装对应的包，但是不会更新 PIPfile 和 PIPfile.lock</p>
</blockquote>
<blockquote>
<p>命令：pipenv install [三方库名]<br> 作用：<br> 一、检测当前项目对应的虚拟环境是否存在，不存在则创建。如果当前项目已经存在 Pipfile 和 Pipfile.lock 文件，则参照这两个文件内容创建虚拟环境并安装文件指定的三方库<br> 二、在虚拟环境中安装指定三方库，如果没有指定，则不安装<br> 三、在项目目录下，通过 Pipfile 和 Pipfile.lock 记录当下已经安装的三方库信息</p>
</blockquote>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-691e4b565fd095f3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1127/format/webp" srcset="/img/loading.gif" alt="img"></p>
<ol>
<li>查看包的依赖结构</li>
</ol>
<pre><code class="undefined">pipenv graph</code></pre>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-71f4e8995bf218ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1117/format/webp" srcset="/img/loading.gif" alt="img"></p>
<ol>
<li>卸载包</li>
</ol>
<pre><code class="undefined">pipenv uninstall requests</code></pre>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-255f64f0d028c0f8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1117/format/webp" srcset="/img/loading.gif" alt="img"></p>
<h3 id="6-2-2-4-退出虚拟环境"><a href="#6-2-2-4-退出虚拟环境" class="headerlink" title="6.2.2.4 退出虚拟环境"></a>6.2.2.4 退出虚拟环境</h3><pre><code class="bash">exit
或
直接关闭 shell 窗口</code></pre>
<h3 id="6-2-2-5-删除虚拟环境"><a href="#6-2-2-5-删除虚拟环境" class="headerlink" title="6.2.2.5 删除虚拟环境"></a>6.2.2.5 删除虚拟环境</h3><pre><code class="bash">先 cd 进入 Pipfile 文件目录位置
pipenv --rm</code></pre>
<p><img src="https:////upload-images.jianshu.io/upload_images/748014-0bf378bb4f9a5356.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/907/format/webp" srcset="/img/loading.gif" alt="img"></p>
<h2 id="6-3-项目交接"><a href="#6-3-项目交接" class="headerlink" title="6.3 项目交接"></a>6.3 项目交接</h2><h3 id="6-3-1-上传项目时，应该包含的文件有？"><a href="#6-3-1-上传项目时，应该包含的文件有？" class="headerlink" title="6.3.1 上传项目时，应该包含的文件有？"></a>6.3.1 上传项目时，应该包含的文件有？</h3><p>应该包括文件有：</p>
<ol>
<li>包和模块源码</li>
<li>Pipfile 和 Pipfile.lock</li>
</ol>
<h3 id="6-3-2-拿到共享的项目后如何操作？"><a href="#6-3-2-拿到共享的项目后如何操作？" class="headerlink" title="6.3.2 拿到共享的项目后如何操作？"></a>6.3.2 拿到共享的项目后如何操作？</h3><p>操作步骤：</p>
<ol>
<li>cd 进入获取的项目文件夹目录内</li>
<li>检查项目是否具有Pipfile 和 Pipfile.lock 文件 （此处应该是必须有的，因为是执行上述分享操作的人给你的项目嘛♪(∇*)啦啦）</li>
<li>执行命令：</li>
</ol>
<pre><code class="undefined">pipenv install</code></pre>
<p>作者：Jacob_LJ<br>链接：<a href="https://www.jianshu.com/p/a83a8f5d68dd" target="_blank" rel="noopener">https://www.jianshu.com/p/a83a8f5d68dd</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
]]></content>
  </entry>
  <entry>
    <title>最新(2020)virtualenv的一些命令</title>
    <url>/2020/04/15/%E6%9C%80%E6%96%B0(2020)virtualenv%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="最新-2020-virtualenv的一些命令"><a href="#最新-2020-virtualenv的一些命令" class="headerlink" title="最新(2020)virtualenv的一些命令"></a>最新(2020)virtualenv的一些命令</h1><p>which python3 查看python目录</p>
<p><a href="http://www.wailian.work/album/xUiBn/?sort=date_desc&amp;pagev=1" target="_blank" rel="noopener">http://www.wailian.work/album/xUiBn/?sort=date_desc&amp;pagev=1</a></p>
<p>virtualenv venv2 -p python3 安装指定版本</p>
<p>source bin/active 进入虚拟环境</p>
<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><p>虚拟环境是一个包含二进制程序和 shell 脚本的目录。二进制程序包含执行脚本的 <em>python</em> 和安装其它模块的 <em>pip</em>。脚本包括激活环境的脚本，<a href="https://wiki.archlinux.org/index.php/Bash" target="_blank" rel="noopener">bash</a>, csh 和<a href="https://wiki.archlinux.org/index.php/Fish" target="_blank" rel="noopener">fish</a> 个有一个。这个虚拟环境模拟了一个完整的 <a href="https://wiki.archlinux.org/index.php/Python" target="_blank" rel="noopener">Python</a> 执行环境和需要的模块，将程序运行的环境与系统其它部分隔离开来。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://wiki.archlinux.org/index.php/Python" target="_blank" rel="noopener">Python</a> 从 3.3 开始包含了 <em>venv</em> 程序，无需单独安装。 如果使用的是老版本的 Python, 需要额外<a href="https://wiki.archlinux.org/index.php/安装" target="_blank" rel="noopener">安装</a> <em>virtualenv</em>。</p>
<ul>
<li>Python 3.3+: <a href="https://www.archlinux.org/packages/?name=python" target="_blank" rel="noopener">python</a></li>
<li>Python 3: <a href="https://www.archlinux.org/packages/?name=python-virtualenv" target="_blank" rel="noopener">python-virtualenv</a></li>
<li>Python 2: <a href="https://www.archlinux.org/packages/?name=python2-virtualenv" target="_blank" rel="noopener">python2-virtualenv</a></li>
</ul>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>不同工具的使用方式基本相同。</p>
<h3 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h3><p>使用<em>venv</em> 或 <em>virtualenv</em> 在项目目录创建虚拟环境，请将 venv 目录加入版本控制系统，这样只要执行 <code>pip freeze</code> 就可以重建虚拟环境。</p>
<h4 id="venv"><a href="#venv" class="headerlink" title="venv"></a>venv</h4><p><strong>Note:</strong> 此方法代替了从 <a href="https://www.archlinux.org/packages/?name=python" target="_blank" rel="noopener">python</a> 3.6 就不建议使用的 <em>pyvenv</em>。</p>
<p><a href="https://www.archlinux.org/packages/?name=python" target="_blank" rel="noopener">python</a> 软件包从 3.3 开始就提供了此工具:</p>
<pre><code>$ python -m venv venv</code></pre><h4 id="virtualenv"><a href="#virtualenv" class="headerlink" title="virtualenv"></a>virtualenv</h4><p>Python 3 使用 <a href="https://www.archlinux.org/packages/?name=python-virtualenv" target="_blank" rel="noopener">python-virtualenv</a> 提供的 <em>virtualenv</em>。</p>
<pre><code>$ virtualenv venv</code></pre><p>Python 2 使用 <a href="https://www.archlinux.org/packages/?name=python2-virtualenv" target="_blank" rel="noopener">python2-virtualenv</a> 提供的 <em>virtualenv2</em>。</p>
<pre><code>$ virtualenv2 venv</code></pre><h3 id="激活"><a href="#激活" class="headerlink" title="激活"></a>激活</h3><p>要激活虚拟环境(这里假设使用的是 bash):</p>
<pre><code>$ source venv/bin/activate
(venv) $</code></pre><p>一旦进入虚拟环境，就可以通过 <em>pip</em> 安装软件包，并正常执行脚本。</p>
<p>要退出寻环境，执行 <code>bin/activate</code> 下的:</p>
<pre><code>(venv) $ deactivate</code></pre><h2 id="Python-版本"><a href="#Python-版本" class="headerlink" title="Python 版本"></a>Python 版本</h2><p>二进制的版本由使用的虚拟环境工具决定。使用 Python 2 工具创建的虚拟环境中，<em>python</em> 命令指向 <code>bin/python2.7</code>，<em>venv</em> 创建的环境中， python 指向 <code>bin/python3.6</code>.</p>
<p><em>venv</em> 和 <em>virtualenv</em> 差别在于 venv 默认使用系统的 Python 程序:</p>
<pre><code>$ ls -l venv/bin/python3.6
lrwxrwxrwx 1 foo foo 7 Jun  3 19:57 venv/bin/python3.6 -&gt; /usr/bin/python3</code></pre><p>而 <em>virtualenv</em> 工具使用环境目录中的 Python 程序:</p>
<pre><code>$ ls -l virtualenv/bin/python3.6
lrwxrwxrwx 1 foo foo 7 Jun  3 19:58 virtualenv/bin/python3.6 -&gt; python3</code></pre>]]></content>
  </entry>
  <entry>
    <title>爬图片素材</title>
    <url>/2020/04/01/%E7%88%AC%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import os</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">headers&#x3D;&#123;&#39;User-Agent&#39;:&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.130 Safari&#x2F;537.36&#39;&#125;</span><br><span class="line"></span><br><span class="line">response&#x3D;requests.get(&#39;https:&#x2F;&#x2F;www.vmgirls.com&#x2F;12985.html&#39;,headers&#x3D;headers)</span><br><span class="line"># print(response.request.headers)</span><br><span class="line">html&#x3D;response.text</span><br><span class="line"># 文件夹</span><br><span class="line">dir_name&#x3D;re.findall(&#39;&lt;h1 class&#x3D;&quot;post-title h3&quot;&gt;(.*?)&lt;&#x2F;h1&gt;&#39;,html)[-1]</span><br><span class="line"></span><br><span class="line">if not os.path.exists(dir_name):</span><br><span class="line">    os.mkdir(dir_name)</span><br><span class="line"></span><br><span class="line">urls&#x3D;re.findall(&#39;&lt;a href&#x3D;&quot;(.*?)&quot; alt&#x3D;&quot;.*?&quot; title&#x3D;&quot;.*?&quot;&gt;&#39;,html)</span><br><span class="line">print(urls)</span><br><span class="line"></span><br><span class="line">for url in urls:</span><br><span class="line">    file_name&#x3D;url.split(&#39;&#x2F;&#39;)[-1]</span><br><span class="line">    response&#x3D;requests.get(url,headers&#x3D;headers)</span><br><span class="line">    with open(dir_name+&#39;&#x2F;&#39;+file_name,&#39;wb&#39;)as f:</span><br><span class="line">        f.write(response.content)</span><br></pre></td></tr></table></figure>

<p><img src="9F2A3DC5A9D149FE8277BAB068E2205C" alt="image"></p>
]]></content>
  </entry>
  <entry>
    <title>Python中的正则表达式</title>
    <url>/2020/03/30/Python%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="元字符和语法"><a href="#元字符和语法" class="headerlink" title="元字符和语法"></a>元字符和语法</h1><table>
<thead>
<tr>
<th align="center">实例</th>
<th align="center">匹配串</th>
</tr>
</thead>
<tbody><tr>
<td align="center">a.c</td>
<td align="center">abc</td>
</tr>
<tr>
<td align="center">a\.c</td>
<td align="center">a.c</td>
</tr>
<tr>
<td align="center">a[jq]k</td>
<td align="center">ajk&amp;aqk</td>
</tr>
<tr>
<td align="center">a\dc</td>
<td align="center">a1c</td>
</tr>
<tr>
<td align="center">a\Dc</td>
<td align="center">abc</td>
</tr>
<tr>
<td align="center">a\s</td>
<td align="center">a s</td>
</tr>
<tr>
<td align="center">a*</td>
<td align="center">a&amp;aaaaaaaa….</td>
</tr>
<tr>
<td align="center">a+</td>
<td align="center">aa&amp;aaaa…</td>
</tr>
<tr>
<td align="center">a?</td>
<td align="center">前一个字符0&amp;1次</td>
</tr>
<tr>
<td align="center">a{m}</td>
<td align="center">a后m个a</td>
</tr>
<tr>
<td align="center">{mn}</td>
<td align="center">m到n个前一字符</td>
</tr>
<tr>
<td align="center">^</td>
<td align="center">匹配每一行的开头</td>
</tr>
<tr>
<td align="center">$</td>
<td align="center">匹配每一行的末尾</td>
</tr>
<tr>
<td align="center">\A&amp;\Z</td>
<td align="center">仅匹配开头&amp;结尾</td>
</tr>
<tr>
<td align="center">## 逻辑与分组</td>
<td align="center"></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">…..</th>
<th align="center">…….</th>
</tr>
</thead>
<tbody><tr>
<td align="center">\</td>
<td align="center">左右任意匹配一个（从左到右）</td>
</tr>
<tr>
<td align="center">a(12|34)c</td>
<td align="center">a34c</td>
</tr>
<tr>
<td align="center">(?#)</td>
<td align="center">忽略#后</td>
</tr>
<tr>
<td align="center">(?!=…)</td>
<td align="center">后面不是..</td>
</tr>
<tr>
<td align="center">(?&lt;=…)</td>
<td align="center">之前是…</td>
</tr>
</tbody></table>
<h2 id="烦人的反斜杠"><a href="#烦人的反斜杠" class="headerlink" title="烦人的反斜杠"></a>烦人的反斜杠</h2><p>原生字符串“ ”直观的解决了问题</p>
<h2 id="RE模块"><a href="#RE模块" class="headerlink" title="RE模块"></a>RE模块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># encoding: UTF-8</span><br><span class="line">import re</span><br><span class="line"> </span><br><span class="line"># 将正则表达式编译成Pattern对象</span><br><span class="line">pattern &#x3D; re.compile(r&#39;hello&#39;)</span><br><span class="line"> </span><br><span class="line"># 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None</span><br><span class="line">match &#x3D; pattern.match(&#39;hello world!&#39;)</span><br><span class="line"> </span><br><span class="line">if match:</span><br><span class="line">    # 使用Match获得分组信息</span><br><span class="line">    print match.group()</span><br><span class="line"> </span><br><span class="line">### 输出 ###</span><br><span class="line"># hello</span><br></pre></td></tr></table></figure>
<h3 id="re-compile-strPattern-flag"><a href="#re-compile-strPattern-flag" class="headerlink" title="re.compile(strPattern[, flag]):"></a>re.compile(strPattern[, flag]):</h3><p>这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。 第二个参数flag是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M。另外，你也可以在regex字符串中指定模式，比如re.compile(‘pattern’, re.I | re.M)与re.compile(‘(?im)pattern’)是等价的。<br>可选值有：</p>
<ul>
<li>re.I(re.IGNORECASE): 忽略大小写（括号内是完整写法，下同）</li>
<li>M(MULTILINE): 多行模式，改变’^’和’$’的行为（参见上图）</li>
<li>S(DOTALL): 点任意匹配模式，改变’.’的行为</li>
<li>L(LOCALE): 使预定字符类 \w \W \b \B \s \S 取决于当前区域设定</li>
<li>U(UNICODE): 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性</li>
<li>X(VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。以下两个正则表达式是等价的：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; re.compile(r&quot;&quot;&quot;\d +  # the integral part</span><br><span class="line">                   \.    # the decimal point</span><br><span class="line">                   \d *  # some fractional digits&quot;&quot;&quot;, re.X)</span><br><span class="line">b &#x3D; re.compile(r&quot;\d+\.\d*&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="Match"><a href="#Match" class="headerlink" title="Match"></a>Match</h4><p>Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p>
<p><strong>属性</strong>：</p>
<ul>
<li><strong>string</strong>: 匹配时使用的文本。</li>
<li><strong>re</strong>: 匹配时使用的Pattern对象。</li>
<li><strong>pos</strong>: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</li>
<li><strong>endpos</strong>: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</li>
<li><strong>lastindex</strong>: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。</li>
<li><strong>lastgroup</strong>: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</li>
</ul>
<p><strong>方法</strong>：</p>
<ul>
<li><p><strong>group</strong>([group1, …]):<br>获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。</p>
</li>
<li><p><strong>groups([default])</strong>:<br>以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。</p>
</li>
<li><p><strong>groupdict</strong>([default]):<br>返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。</p>
</li>
<li><p><strong>start([group])</strong>:<br>返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。</p>
</li>
<li><p><strong>end([group])</strong>:<br>返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。</p>
</li>
<li><p><strong>span([group])</strong>:<br>返回(start(group), end(group))。</p>
</li>
<li><p><strong>expand</strong>(template):<br>将匹配到的分组代入template中然后返回。template中可以使用\id或\g<id>、\g<name>引用分组，但不能使用编号0。\id与\g<id>是等价的；但\10将被认为是第10个分组，如果你想表达\1之后是字符’0’，只能使用\g&lt;1&gt;0。</p>
</li>
</ul>
<h4 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h4><p>Pattern对象是一个编译好的正则表达式，通过Pattern提供的一系列方法可以对文本进行匹配查找。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">p &#x3D; re.compile(r&#39;(\w+) (\w+)(?P&lt;sign&gt;.*)&#39;, re.DOTALL)</span><br><span class="line"> </span><br><span class="line">print &quot;p.pattern:&quot;, p.pattern</span><br><span class="line">print &quot;p.flags:&quot;, p.flags</span><br><span class="line">print &quot;p.groups:&quot;, p.groups</span><br><span class="line">print &quot;p.groupindex:&quot;, p.groupindex</span><br><span class="line"> </span><br><span class="line">### output ###</span><br><span class="line"># p.pattern: (\w+) (\w+)(?P&lt;sign&gt;.*)</span><br><span class="line"># p.flags: 16</span><br><span class="line"># p.groups: 3</span><br><span class="line"># p.groupindex: &#123;&#39;sign&#39;: 3&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是Python对于正则表达式的支持 qwq !!</p>
]]></content>
  </entry>
  <entry>
    <title>python环境变量升级</title>
    <url>/2020/03/27/python%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre><code>默认安装路径：C:\python35</code></pre><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>【在第二个内容框中找到 变量名为Path 的一行，双击<br> Python安装目录追加到变值值中，用 ； 分割</p>
<p> 如：原来的值;C:\python35，切记前面有分号</p>
<p>(备注：默认安装时会自动添加环境变量)</p>
<h1 id="要临时设置环境变量"><a href="#要临时设置环境变量" class="headerlink" title="要临时设置环境变量"></a>要临时设置环境变量</h1><p> 打开命令提示符并使用 set 命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\&gt;set PATH&#x3D;C:\Program Files\Python 3.8;%PATH%</span><br><span class="line">C:\&gt;set PYTHONPATH&#x3D;%PYTHONPATH%;C:\My_python_lib</span><br><span class="line">C:\&gt;python要永久修改默认环境变量，请单击“开始”并搜索“编辑环境变量”，或打开“系统属性” Advanced system settings ，然后单击 Environment Variables 按钮。在此对话框中，您可以添加或修改用户和系统变量。要更改系统变量，您需要对计算机进行无限制访问（即管理员权限）。</span><br></pre></td></tr></table></figure>
<p>由该控制台启动的任何应用程序都继承设这些设置。</p>
<h1 id="要永久修改默认环境变量"><a href="#要永久修改默认环境变量" class="headerlink" title="要永久修改默认环境变量"></a>要永久修改默认环境变量</h1><p>  单击“开始”并搜索“编辑环境变量”，或打开“系统属性” Advanced system settings ，然后单击 Environment Variables 按钮。在此对话框中，您可以添加或修改用户和系统变量。要更改系统变量，您需要对计算机进行无限制访问（即管理员权限）。</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Windows会将用户变量串联的系统变量 之后 ，这可能会在修改 PATH 时导致意外结果。<br>PYTHONPATH 变量被Python 2和Python 3的所有版本使用，因此除非它只包含与所有已安装的Python版本兼容的代码，否则不要永久配置此变量。</p>
]]></content>
  </entry>
  <entry>
    <title>virtualenv的安装</title>
    <url>/2020/03/27/virtualenv%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>使各应用有“独立”的Python运行环境</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>$ pip3 install virtualen</p>
<h1 id="开始项目"><a href="#开始项目" class="headerlink" title="开始项目"></a>开始项目</h1><h2 id="第一步（创建目录"><a href="#第一步（创建目录" class="headerlink" title="第一步（创建目录)"></a>第一步（创建目录)</h2><p>mkdir myproject<br>cd myproject/</p>
<h2 id="第二步（创建一个独立的Python运行环境，命名为venv：）"><a href="#第二步（创建一个独立的Python运行环境，命名为venv：）" class="headerlink" title="第二步（创建一个独立的Python运行环境，命名为venv：）"></a>第二步（创建一个独立的Python运行环境，命名为venv：）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mac:myproject michael$ virtualenv --no-site-packages venv</span><br><span class="line">Using base prefix &#39;&#x2F;usr&#x2F;local&#x2F;...&#x2F;Python.framework&#x2F;Versions&#x2F;3.4&#39;</span><br><span class="line">New python executable in venv&#x2F;bin&#x2F;python3.4</span><br><span class="line">Also creating executable in venv&#x2F;bin&#x2F;python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure>

<p>命令virtualenv就可以创建一个独立的Python运行环境，我们还加上了参数–no-site-packages，这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。</p>
<p>新建的Python环境被放到当前目录下的venv目录。有了venv这个Python环境，可以用source进入该环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mac:myproject michael$ source venv&#x2F;bin&#x2F;activate</span><br><span class="line">(venv)Mac:myproject michael$</span><br></pre></td></tr></table></figure>
<p>有个(venv)前缀，表示当前环境是一个名为venv的Python环境。</p>
<p>在venv环境下，用pip安装的包都被安装到venv这个环境下，系统Python环境不受任何影响。也就是说，venv环境是专门针对myproject这个应用创建的。</p>
<p>退出当前的venv环境，使用deactivate命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv)Mac:myproject michael$ deactivate </span><br><span class="line">Mac:myproject michael$</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
</search>
