<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python环境变量升级</title>
    <url>/2020/03/27/python%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre><code>默认安装路径：C:\python35</code></pre><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>【在第二个内容框中找到 变量名为Path 的一行，双击<br> Python安装目录追加到变值值中，用 ； 分割</p>
<p> 如：原来的值;C:\python35，切记前面有分号</p>
<p>(备注：默认安装时会自动添加环境变量)</p>
<h1 id="要临时设置环境变量"><a href="#要临时设置环境变量" class="headerlink" title="要临时设置环境变量"></a>要临时设置环境变量</h1><p> 打开命令提示符并使用 set 命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\&gt;set PATH&#x3D;C:\Program Files\Python 3.8;%PATH%</span><br><span class="line">C:\&gt;set PYTHONPATH&#x3D;%PYTHONPATH%;C:\My_python_lib</span><br><span class="line">C:\&gt;python要永久修改默认环境变量，请单击“开始”并搜索“编辑环境变量”，或打开“系统属性” Advanced system settings ，然后单击 Environment Variables 按钮。在此对话框中，您可以添加或修改用户和系统变量。要更改系统变量，您需要对计算机进行无限制访问（即管理员权限）。</span><br></pre></td></tr></table></figure>
<p>由该控制台启动的任何应用程序都继承设这些设置。</p>
<h1 id="要永久修改默认环境变量"><a href="#要永久修改默认环境变量" class="headerlink" title="要永久修改默认环境变量"></a>要永久修改默认环境变量</h1><p>  单击“开始”并搜索“编辑环境变量”，或打开“系统属性” Advanced system settings ，然后单击 Environment Variables 按钮。在此对话框中，您可以添加或修改用户和系统变量。要更改系统变量，您需要对计算机进行无限制访问（即管理员权限）。</p>
<h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Windows会将用户变量串联的系统变量 之后 ，这可能会在修改 PATH 时导致意外结果。<br>PYTHONPATH 变量被Python 2和Python 3的所有版本使用，因此除非它只包含与所有已安装的Python版本兼容的代码，否则不要永久配置此变量。</p>
]]></content>
  </entry>
  <entry>
    <title>virtualenv的安装</title>
    <url>/2020/03/27/virtualenv%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>使各应用有“独立”的Python运行环境</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>$ pip3 install virtualen</p>
<h1 id="开始项目"><a href="#开始项目" class="headerlink" title="开始项目"></a>开始项目</h1><h2 id="第一步（创建目录"><a href="#第一步（创建目录" class="headerlink" title="第一步（创建目录)"></a>第一步（创建目录)</h2><p>mkdir myproject<br>cd myproject/</p>
<h2 id="第二步（创建一个独立的Python运行环境，命名为venv：）"><a href="#第二步（创建一个独立的Python运行环境，命名为venv：）" class="headerlink" title="第二步（创建一个独立的Python运行环境，命名为venv：）"></a>第二步（创建一个独立的Python运行环境，命名为venv：）</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mac:myproject michael$ virtualenv --no-site-packages venv</span><br><span class="line">Using base prefix &#39;&#x2F;usr&#x2F;local&#x2F;...&#x2F;Python.framework&#x2F;Versions&#x2F;3.4&#39;</span><br><span class="line">New python executable in venv&#x2F;bin&#x2F;python3.4</span><br><span class="line">Also creating executable in venv&#x2F;bin&#x2F;python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure>

<p>命令virtualenv就可以创建一个独立的Python运行环境，我们还加上了参数–no-site-packages，这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。</p>
<p>新建的Python环境被放到当前目录下的venv目录。有了venv这个Python环境，可以用source进入该环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Mac:myproject michael$ source venv&#x2F;bin&#x2F;activate</span><br><span class="line">(venv)Mac:myproject michael$</span><br></pre></td></tr></table></figure>
<p>有个(venv)前缀，表示当前环境是一个名为venv的Python环境。</p>
<p>在venv环境下，用pip安装的包都被安装到venv这个环境下，系统Python环境不受任何影响。也就是说，venv环境是专门针对myproject这个应用创建的。</p>
<p>退出当前的venv环境，使用deactivate命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(venv)Mac:myproject michael$ deactivate </span><br><span class="line">Mac:myproject michael$</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>网络</title>
    <url>/2020/03/26/%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>title:网络协议<br>date：2020-3.24 18:29<br>categories:<br>   -network<br>tags:<br>   -network<br>mp3:<a href="http://mp.111ttt.cn/mp3music/24147644.mp3" target="_blank" rel="noopener">http://mp.111ttt.cn/mp3music/24147644.mp3</a><br>cover: cover.jpg</p>
<h1 id="网络层次划分"><a href="#网络层次划分" class="headerlink" title="网络层次划分"></a>网络层次划分</h1><p>应用层<br>表示层<br>会话层<br>传输层<br>网络层<br>数据链路层<br>物理层</p>
<h1 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h1><h2 id="tcp-ip"><a href="#tcp-ip" class="headerlink" title="tcp ip"></a>tcp ip</h2><p>TCP/IP协议涵盖了OSI参考模型的第三层、第四层，即网络层、传输层。TCP/IP也不是只有TCP + IP这两种协议，它是协议栈的统称，它还包括 ARP，ICMP，IGMP，UDP，以及让域名访问成为可能的DNS，以及电脑/手机可以自动获取IP地址的DHCP。当然还有形形色色的应用层的协议如 HTTP / SMTP / FTP 等。</p>
<p>《TCP/IP协议》详解卷一，是一本很好的教材，一条消息竟然双向耗费9个包，仅仅是调用一次connect（）建立连接，调用一次 send（），然后程序退出。</p>
<p>TCP建立连接<br>看TCP如何建立连接，建立连接需要三个包的交互，这个应该是connect()完成的。</p>
<p>TCP发送数据<br>然后看到自己的消息内容是一个包，对方没有数据，只有确认ACK，这是两个包，这个由 send () 触发。</p>
<p>TCP释放连接<br>然后系统自动退出，虽然我的程序没有调用什么函数，但是系统自动帮我调用了 close () 函数，于是又触发了TCP 关闭连接，这是四个包。</p>
<p>试用UDP socket 编写聊天程序，直接调用一个函数Sendto() 就可以了（用IP访问），抓包一看，一个消息就是一个包，对方也没有确认，UDP就是加上一个封装头就出去了，不需要建立连接，自然也无需关闭连接。</p>
]]></content>
  </entry>
  <entry>
    <title>search</title>
    <url>/2020/03/26/search/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>test</title>
    <url>/2020/03/22/test/</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
