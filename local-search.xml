<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>爬图片素材</title>
    <link href="/2020/04/01/%E7%88%AC%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90/"/>
    <url>/2020/04/01/%E7%88%AC%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90/</url>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import os</span><br><span class="line">import urllib</span><br><span class="line"></span><br><span class="line">headers&#x3D;&#123;&#39;User-Agent&#39;:&#39;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;79.0.3945.130 Safari&#x2F;537.36&#39;&#125;</span><br><span class="line"></span><br><span class="line">response&#x3D;requests.get(&#39;https:&#x2F;&#x2F;www.vmgirls.com&#x2F;12985.html&#39;,headers&#x3D;headers)</span><br><span class="line"># print(response.request.headers)</span><br><span class="line">html&#x3D;response.text</span><br><span class="line"># 文件夹</span><br><span class="line">dir_name&#x3D;re.findall(&#39;&lt;h1 class&#x3D;&quot;post-title h3&quot;&gt;(.*?)&lt;&#x2F;h1&gt;&#39;,html)[-1]</span><br><span class="line"></span><br><span class="line">if not os.path.exists(dir_name):</span><br><span class="line">    os.mkdir(dir_name)</span><br><span class="line"></span><br><span class="line">urls&#x3D;re.findall(&#39;&lt;a href&#x3D;&quot;(.*?)&quot; alt&#x3D;&quot;.*?&quot; title&#x3D;&quot;.*?&quot;&gt;&#39;,html)</span><br><span class="line">print(urls)</span><br><span class="line"></span><br><span class="line">for url in urls:</span><br><span class="line">    file_name&#x3D;url.split(&#39;&#x2F;&#39;)[-1]</span><br><span class="line">    response&#x3D;requests.get(url,headers&#x3D;headers)</span><br><span class="line">    with open(dir_name+&#39;&#x2F;&#39;+file_name,&#39;wb&#39;)as f:</span><br><span class="line">        f.write(response.content)</span><br></pre></td></tr></table></figure><p><img src="9F2A3DC5A9D149FE8277BAB068E2205C" alt="image"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python中的正则表达式</title>
    <link href="/2020/03/30/Python%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2020/03/30/Python%E4%B8%AD%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="元字符和语法"><a href="#元字符和语法" class="headerlink" title="元字符和语法"></a>元字符和语法</h1><table><thead><tr><th align="center">实例</th><th align="center">匹配串</th></tr></thead><tbody><tr><td align="center">a.c</td><td align="center">abc</td></tr><tr><td align="center">a\.c</td><td align="center">a.c</td></tr><tr><td align="center">a[jq]k</td><td align="center">ajk&amp;aqk</td></tr><tr><td align="center">a\dc</td><td align="center">a1c</td></tr><tr><td align="center">a\Dc</td><td align="center">abc</td></tr><tr><td align="center">a\s</td><td align="center">a s</td></tr><tr><td align="center">a*</td><td align="center">a&amp;aaaaaaaa….</td></tr><tr><td align="center">a+</td><td align="center">aa&amp;aaaa…</td></tr><tr><td align="center">a?</td><td align="center">前一个字符0&amp;1次</td></tr><tr><td align="center">a{m}</td><td align="center">a后m个a</td></tr><tr><td align="center">{mn}</td><td align="center">m到n个前一字符</td></tr><tr><td align="center">^</td><td align="center">匹配每一行的开头</td></tr><tr><td align="center">$</td><td align="center">匹配每一行的末尾</td></tr><tr><td align="center">\A&amp;\Z</td><td align="center">仅匹配开头&amp;结尾</td></tr><tr><td align="center">## 逻辑与分组</td><td align="center"></td></tr></tbody></table><table><thead><tr><th align="center">…..</th><th align="center">…….</th></tr></thead><tbody><tr><td align="center">\</td><td align="center">左右任意匹配一个（从左到右）</td></tr><tr><td align="center">a(12|34)c</td><td align="center">a34c</td></tr><tr><td align="center">(?#)</td><td align="center">忽略#后</td></tr><tr><td align="center">(?!=…)</td><td align="center">后面不是..</td></tr><tr><td align="center">(?&lt;=…)</td><td align="center">之前是…</td></tr></tbody></table><h2 id="烦人的反斜杠"><a href="#烦人的反斜杠" class="headerlink" title="烦人的反斜杠"></a>烦人的反斜杠</h2><p>原生字符串“ ”直观的解决了问题</p><h2 id="RE模块"><a href="#RE模块" class="headerlink" title="RE模块"></a>RE模块</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># encoding: UTF-8</span><br><span class="line">import re</span><br><span class="line"> </span><br><span class="line"># 将正则表达式编译成Pattern对象</span><br><span class="line">pattern &#x3D; re.compile(r&#39;hello&#39;)</span><br><span class="line"> </span><br><span class="line"># 使用Pattern匹配文本，获得匹配结果，无法匹配时将返回None</span><br><span class="line">match &#x3D; pattern.match(&#39;hello world!&#39;)</span><br><span class="line"> </span><br><span class="line">if match:</span><br><span class="line">    # 使用Match获得分组信息</span><br><span class="line">    print match.group()</span><br><span class="line"> </span><br><span class="line">### 输出 ###</span><br><span class="line"># hello</span><br></pre></td></tr></table></figure><h3 id="re-compile-strPattern-flag"><a href="#re-compile-strPattern-flag" class="headerlink" title="re.compile(strPattern[, flag]):"></a>re.compile(strPattern[, flag]):</h3><p>这个方法是Pattern类的工厂方法，用于将字符串形式的正则表达式编译为Pattern对象。 第二个参数flag是匹配模式，取值可以使用按位或运算符’|’表示同时生效，比如re.I | re.M。另外，你也可以在regex字符串中指定模式，比如re.compile(‘pattern’, re.I | re.M)与re.compile(‘(?im)pattern’)是等价的。<br>可选值有：</p><ul><li>re.I(re.IGNORECASE): 忽略大小写（括号内是完整写法，下同）</li><li>M(MULTILINE): 多行模式，改变’^’和’$’的行为（参见上图）</li><li>S(DOTALL): 点任意匹配模式，改变’.’的行为</li><li>L(LOCALE): 使预定字符类 \w \W \b \B \s \S 取决于当前区域设定</li><li>U(UNICODE): 使预定字符类 \w \W \b \B \s \S \d \D 取决于unicode定义的字符属性</li><li>X(VERBOSE): 详细模式。这个模式下正则表达式可以是多行，忽略空白字符，并可以加入注释。以下两个正则表达式是等价的：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; re.compile(r&quot;&quot;&quot;\d +  # the integral part</span><br><span class="line">                   \.    # the decimal point</span><br><span class="line">                   \d *  # some fractional digits&quot;&quot;&quot;, re.X)</span><br><span class="line">b &#x3D; re.compile(r&quot;\d+\.\d*&quot;)</span><br></pre></td></tr></table></figure><h4 id="Match"><a href="#Match" class="headerlink" title="Match"></a>Match</h4><p>Match对象是一次匹配的结果，包含了很多关于此次匹配的信息，可以使用Match提供的可读属性或方法来获取这些信息。</p><p><strong>属性</strong>：</p><ul><li><strong>string</strong>: 匹配时使用的文本。</li><li><strong>re</strong>: 匹配时使用的Pattern对象。</li><li><strong>pos</strong>: 文本中正则表达式开始搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</li><li><strong>endpos</strong>: 文本中正则表达式结束搜索的索引。值与Pattern.match()和Pattern.seach()方法的同名参数相同。</li><li><strong>lastindex</strong>: 最后一个被捕获的分组在文本中的索引。如果没有被捕获的分组，将为None。</li><li><strong>lastgroup</strong>: 最后一个被捕获的分组的别名。如果这个分组没有别名或者没有被捕获的分组，将为None。</li></ul><p><strong>方法</strong>：</p><ul><li><p><strong>group</strong>([group1, …]):<br>获得一个或多个分组截获的字符串；指定多个参数时将以元组形式返回。group1可以使用编号也可以使用别名；编号0代表整个匹配的子串；不填写参数时，返回group(0)；没有截获字符串的组返回None；截获了多次的组返回最后一次截获的子串。</p></li><li><p><strong>groups([default])</strong>:<br>以元组形式返回全部分组截获的字符串。相当于调用group(1,2,…last)。default表示没有截获字符串的组以这个值替代，默认为None。</p></li><li><p><strong>groupdict</strong>([default]):<br>返回以有别名的组的别名为键、以该组截获的子串为值的字典，没有别名的组不包含在内。default含义同上。</p></li><li><p><strong>start([group])</strong>:<br>返回指定的组截获的子串在string中的起始索引（子串第一个字符的索引）。group默认值为0。</p></li><li><p><strong>end([group])</strong>:<br>返回指定的组截获的子串在string中的结束索引（子串最后一个字符的索引+1）。group默认值为0。</p></li><li><p><strong>span([group])</strong>:<br>返回(start(group), end(group))。</p></li><li><p><strong>expand</strong>(template):<br>将匹配到的分组代入template中然后返回。template中可以使用\id或\g<id>、\g<name>引用分组，但不能使用编号0。\id与\g<id>是等价的；但\10将被认为是第10个分组，如果你想表达\1之后是字符’0’，只能使用\g&lt;1&gt;0。</p></li></ul><h4 id="Pattern"><a href="#Pattern" class="headerlink" title="Pattern"></a>Pattern</h4><p>Pattern对象是一个编译好的正则表达式，通过Pattern提供的一系列方法可以对文本进行匹配查找。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">p &#x3D; re.compile(r&#39;(\w+) (\w+)(?P&lt;sign&gt;.*)&#39;, re.DOTALL)</span><br><span class="line"> </span><br><span class="line">print &quot;p.pattern:&quot;, p.pattern</span><br><span class="line">print &quot;p.flags:&quot;, p.flags</span><br><span class="line">print &quot;p.groups:&quot;, p.groups</span><br><span class="line">print &quot;p.groupindex:&quot;, p.groupindex</span><br><span class="line"> </span><br><span class="line">### output ###</span><br><span class="line"># p.pattern: (\w+) (\w+)(?P&lt;sign&gt;.*)</span><br><span class="line"># p.flags: 16</span><br><span class="line"># p.groups: 3</span><br><span class="line"># p.groupindex: &#123;&#39;sign&#39;: 3&#125;</span><br></pre></td></tr></table></figure><p>以上就是Python对于正则表达式的支持 qwq !!</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>python环境变量升级</title>
    <link href="/2020/03/27/python%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8D%87%E7%BA%A7/"/>
    <url>/2020/03/27/python%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%8D%87%E7%BA%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre><code>默认安装路径：C:\python35</code></pre><h1 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h1><p>【在第二个内容框中找到 变量名为Path 的一行，双击<br> Python安装目录追加到变值值中，用 ； 分割</p><p> 如：原来的值;C:\python35，切记前面有分号</p><p>(备注：默认安装时会自动添加环境变量)</p><h1 id="要临时设置环境变量"><a href="#要临时设置环境变量" class="headerlink" title="要临时设置环境变量"></a>要临时设置环境变量</h1><p> 打开命令提示符并使用 set 命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">C:\&gt;set PATH&#x3D;C:\Program Files\Python 3.8;%PATH%</span><br><span class="line">C:\&gt;set PYTHONPATH&#x3D;%PYTHONPATH%;C:\My_python_lib</span><br><span class="line">C:\&gt;python要永久修改默认环境变量，请单击“开始”并搜索“编辑环境变量”，或打开“系统属性” Advanced system settings ，然后单击 Environment Variables 按钮。在此对话框中，您可以添加或修改用户和系统变量。要更改系统变量，您需要对计算机进行无限制访问（即管理员权限）。</span><br></pre></td></tr></table></figure><p>由该控制台启动的任何应用程序都继承设这些设置。</p><h1 id="要永久修改默认环境变量"><a href="#要永久修改默认环境变量" class="headerlink" title="要永久修改默认环境变量"></a>要永久修改默认环境变量</h1><p>  单击“开始”并搜索“编辑环境变量”，或打开“系统属性” Advanced system settings ，然后单击 Environment Variables 按钮。在此对话框中，您可以添加或修改用户和系统变量。要更改系统变量，您需要对计算机进行无限制访问（即管理员权限）。</p><h2 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h2><p>Windows会将用户变量串联的系统变量 之后 ，这可能会在修改 PATH 时导致意外结果。<br>PYTHONPATH 变量被Python 2和Python 3的所有版本使用，因此除非它只包含与所有已安装的Python版本兼容的代码，否则不要永久配置此变量。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>virtualenv的安装</title>
    <link href="/2020/03/27/virtualenv%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/2020/03/27/virtualenv%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>使各应用有“独立”的Python运行环境</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>$ pip3 install virtualen</p><h1 id="开始项目"><a href="#开始项目" class="headerlink" title="开始项目"></a>开始项目</h1><h2 id="第一步（创建目录"><a href="#第一步（创建目录" class="headerlink" title="第一步（创建目录)"></a>第一步（创建目录)</h2><p>mkdir myproject<br>cd myproject/</p><h2 id="第二步（创建一个独立的Python运行环境，命名为venv：）"><a href="#第二步（创建一个独立的Python运行环境，命名为venv：）" class="headerlink" title="第二步（创建一个独立的Python运行环境，命名为venv：）"></a>第二步（创建一个独立的Python运行环境，命名为venv：）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mac:myproject michael$ virtualenv --no-site-packages venv</span><br><span class="line">Using base prefix &#39;&#x2F;usr&#x2F;local&#x2F;...&#x2F;Python.framework&#x2F;Versions&#x2F;3.4&#39;</span><br><span class="line">New python executable in venv&#x2F;bin&#x2F;python3.4</span><br><span class="line">Also creating executable in venv&#x2F;bin&#x2F;python</span><br><span class="line">Installing setuptools, pip, wheel...done.</span><br></pre></td></tr></table></figure><p>命令virtualenv就可以创建一个独立的Python运行环境，我们还加上了参数–no-site-packages，这样，已经安装到系统Python环境中的所有第三方包都不会复制过来，这样，我们就得到了一个不带任何第三方包的“干净”的Python运行环境。</p><p>新建的Python环境被放到当前目录下的venv目录。有了venv这个Python环境，可以用source进入该环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mac:myproject michael$ source venv&#x2F;bin&#x2F;activate</span><br><span class="line">(venv)Mac:myproject michael$</span><br></pre></td></tr></table></figure><p>有个(venv)前缀，表示当前环境是一个名为venv的Python环境。</p><p>在venv环境下，用pip安装的包都被安装到venv这个环境下，系统Python环境不受任何影响。也就是说，venv环境是专门针对myproject这个应用创建的。</p><p>退出当前的venv环境，使用deactivate命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(venv)Mac:myproject michael$ deactivate </span><br><span class="line">Mac:myproject michael$</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
